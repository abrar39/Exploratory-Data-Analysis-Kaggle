{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":70203,"databundleVersionId":8068726,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('/kaggle/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-08T12:18:34.521488Z","iopub.execute_input":"2024-05-08T12:18:34.521891Z","iopub.status.idle":"2024-05-08T12:18:34.947085Z","shell.execute_reply.started":"2024-05-08T12:18:34.521860Z","shell.execute_reply":"2024-05-08T12:18:34.945898Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import torch\nimport torchaudio\nfrom torchaudio.transforms import Spectrogram, MelSpectrogram\nimport librosa\n\nfrom IPython.display import Audio\nprint(torch.__version__)\nprint(torchaudio.__version__)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:34.949215Z","iopub.execute_input":"2024-05-08T12:18:34.949645Z","iopub.status.idle":"2024-05-08T12:18:38.648925Z","shell.execute_reply.started":"2024-05-08T12:18:34.949617Z","shell.execute_reply":"2024-05-08T12:18:38.647779Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Exploratory Data Analysis","metadata":{}},{"cell_type":"code","source":"meta_file = '/kaggle/input/birdclef-2024/train_metadata.csv'\nmeta_df = pd.read_csv(meta_file)\nmeta_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:38.650483Z","iopub.execute_input":"2024-05-08T12:18:38.651003Z","iopub.status.idle":"2024-05-08T12:18:38.868729Z","shell.execute_reply.started":"2024-05-08T12:18:38.650959Z","shell.execute_reply":"2024-05-08T12:18:38.867592Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Total number of records in the data\nprint(f\"There are {meta_df.shape[0]} records in the dataset.\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:38.872060Z","iopub.execute_input":"2024-05-08T12:18:38.872508Z","iopub.status.idle":"2024-05-08T12:18:38.877656Z","shell.execute_reply.started":"2024-05-08T12:18:38.872466Z","shell.execute_reply":"2024-05-08T12:18:38.876880Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Number of Unique Labels\nprint(f\"There are {len(meta_df['primary_label'].unique())} bird species.\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:38.878868Z","iopub.execute_input":"2024-05-08T12:18:38.879217Z","iopub.status.idle":"2024-05-08T12:18:38.895089Z","shell.execute_reply.started":"2024-05-08T12:18:38.879183Z","shell.execute_reply":"2024-05-08T12:18:38.893666Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Let's check the records for each bird\nbird_records = {}\nfor bird in meta_df['primary_label'].unique():\n    bird_records[bird] = len(meta_df[meta_df['primary_label'] == bird])","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:38.896776Z","iopub.execute_input":"2024-05-08T12:18:38.897554Z","iopub.status.idle":"2024-05-08T12:18:39.330623Z","shell.execute_reply.started":"2024-05-08T12:18:38.897521Z","shell.execute_reply":"2024-05-08T12:18:39.329603Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot the record count for visualization\nplt.figure(figsize=(15, 7))\nplt.bar(*zip(*sorted(bird_records.items())))\nplt.xlabel('Bird Specie')\nplt.ylabel('Records Count')\nplt.title('Histogram of Birds Record Count')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:39.332219Z","iopub.execute_input":"2024-05-08T12:18:39.332510Z","iopub.status.idle":"2024-05-08T12:18:40.749644Z","shell.execute_reply.started":"2024-05-08T12:18:39.332479Z","shell.execute_reply":"2024-05-08T12:18:40.748226Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(20, 7))\nplt.hist(meta_df['primary_label'], bins=len(meta_df['primary_label'].unique()))\nplt.xlabel('Bird Species')\nplt.ylabel('Bird Count')\nplt.title('Histogram of Bird Counts')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:40.750913Z","iopub.execute_input":"2024-05-08T12:18:40.751289Z","iopub.status.idle":"2024-05-08T12:18:42.310768Z","shell.execute_reply.started":"2024-05-08T12:18:40.751259Z","shell.execute_reply":"2024-05-08T12:18:42.309584Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check which bird has the maximum and minimum recorded samples\nbird_max, count_max = max(bird_records.items(), key=lambda k: k[1])\nbird_min, count_min = min(bird_records.items(), key=lambda k: k[1])\nprint(f\"Max Count : {count_max} for the Bird Specie : {bird_max}\")\nprint(f\"Min Count : {count_min} for the Bird Specie : {bird_min}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:42.312275Z","iopub.execute_input":"2024-05-08T12:18:42.313150Z","iopub.status.idle":"2024-05-08T12:18:42.320634Z","shell.execute_reply.started":"2024-05-08T12:18:42.313108Z","shell.execute_reply":"2024-05-08T12:18:42.319513Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It is Clear from the above histogram that there is a clear clas imbalance in the data set. Some Species have as muc","metadata":{}},{"cell_type":"markdown","source":"## Exploring the Audio File","metadata":{}},{"cell_type":"code","source":"# Let's Load a random audio file and explore it further.\naudio_file = meta_df.sample(n=1)[['primary_label', 'filename']]\naudio_file","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:42.323737Z","iopub.execute_input":"2024-05-08T12:18:42.324134Z","iopub.status.idle":"2024-05-08T12:18:42.344735Z","shell.execute_reply.started":"2024-05-08T12:18:42.324102Z","shell.execute_reply":"2024-05-08T12:18:42.343602Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_audio_directory_path = '/kaggle/input/birdclef-2024/train_audio'\naudio_file_path = os.path.join(train_audio_directory_path, audio_file['filename'].iloc[0])\naudio_file_path","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:42.346380Z","iopub.execute_input":"2024-05-08T12:18:42.346722Z","iopub.status.idle":"2024-05-08T12:18:42.356323Z","shell.execute_reply.started":"2024-05-08T12:18:42.346692Z","shell.execute_reply":"2024-05-08T12:18:42.354059Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"waveform, sample_rate = torchaudio.load(audio_file_path)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:42.358135Z","iopub.execute_input":"2024-05-08T12:18:42.358634Z","iopub.status.idle":"2024-05-08T12:18:42.549148Z","shell.execute_reply.started":"2024-05-08T12:18:42.358593Z","shell.execute_reply":"2024-05-08T12:18:42.548039Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Listen the audio file\nAudio(waveform.numpy()[0], rate=sample_rate)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:24:37.678711Z","iopub.execute_input":"2024-05-08T12:24:37.679099Z","iopub.status.idle":"2024-05-08T12:24:37.725248Z","shell.execute_reply.started":"2024-05-08T12:24:37.679072Z","shell.execute_reply":"2024-05-08T12:24:37.723997Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Plot the Waveform","metadata":{}},{"cell_type":"code","source":"# This function uses the matplotlib functionality to plot the waveform\ndef plot_waveform(waveform, sample_rate):\n    waveform = waveform.numpy()\n\n    num_channels, num_frames = waveform.shape\n    time_axis = torch.arange(0, num_frames) / sample_rate\n\n    figure, axes = plt.subplots(num_channels, 1)\n    if num_channels == 1:\n        axes = [axes]\n    for c in range(num_channels):\n        axes[c].plot(time_axis, waveform[c], linewidth=1)\n        axes[c].grid(True)\n        if num_channels > 1:\n            axes[c].set_ylabel(f\"Channel {c+1}\")\n    figure.suptitle(\"waveform\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:42.743783Z","iopub.execute_input":"2024-05-08T12:18:42.744228Z","iopub.status.idle":"2024-05-08T12:18:42.753357Z","shell.execute_reply.started":"2024-05-08T12:18:42.744197Z","shell.execute_reply":"2024-05-08T12:18:42.752438Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_waveform(waveform, sample_rate)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:18:42.754728Z","iopub.execute_input":"2024-05-08T12:18:42.755086Z","iopub.status.idle":"2024-05-08T12:19:00.401366Z","shell.execute_reply.started":"2024-05-08T12:18:42.755059Z","shell.execute_reply":"2024-05-08T12:19:00.400207Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Spectrograms Using Matplotlib","metadata":{}},{"cell_type":"code","source":"# This function uses the matplotlib functionality to plot the spectrogram\ndef plot_specgram(waveform, sample_rate, title=\"Spectrogram\"):\n    waveform = waveform.numpy()\n\n    num_channels, num_frames = waveform.shape\n\n    figure, axes = plt.subplots(num_channels, 1)\n    if num_channels == 1:\n        axes = [axes]\n    for c in range(num_channels):\n        axes[c].specgram(waveform[c], Fs=sample_rate)\n        if num_channels > 1:\n            axes[c].set_ylabel(f\"Channel {c+1}\")\n    figure.suptitle(title)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:19:00.403086Z","iopub.execute_input":"2024-05-08T12:19:00.403408Z","iopub.status.idle":"2024-05-08T12:19:00.409553Z","shell.execute_reply.started":"2024-05-08T12:19:00.403382Z","shell.execute_reply":"2024-05-08T12:19:00.408637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_specgram(waveform, sample_rate, title=\"Spectrogram\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:23:20.513056Z","iopub.execute_input":"2024-05-08T12:23:20.513485Z","iopub.status.idle":"2024-05-08T12:23:21.335067Z","shell.execute_reply.started":"2024-05-08T12:23:20.513453Z","shell.execute_reply":"2024-05-08T12:23:21.333932Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Spectrograms Using TorchAudio","metadata":{}},{"cell_type":"code","source":"# Plot waveform and Spectrograms Using TorchAudio\ndef plot_waveform(waveform, sr, title=\"Waveform\", ax=None):\n    waveform = waveform.numpy()\n\n    num_channels, num_frames = waveform.shape\n    time_axis = torch.arange(0, num_frames) / sr\n\n    if ax is None:\n        _, ax = plt.subplots(num_channels, 1)\n    ax.plot(time_axis, waveform[0], linewidth=1)\n    ax.grid(True)\n    ax.set_xlim([0, time_axis[-1]])\n    ax.set_title(title)\n\n\ndef plot_spectrogram(specgram, title=None, ylabel=\"freq_bin\", ax=None):\n    if ax is None:\n        _, ax = plt.subplots(1, 1)\n    if title is not None:\n        ax.set_title(title)\n    ax.set_ylabel(ylabel)\n    ax.imshow(librosa.power_to_db(specgram), origin=\"lower\", aspect=\"auto\", interpolation=\"nearest\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:26:35.971264Z","iopub.execute_input":"2024-05-08T12:26:35.971666Z","iopub.status.idle":"2024-05-08T12:26:35.980355Z","shell.execute_reply.started":"2024-05-08T12:26:35.971638Z","shell.execute_reply":"2024-05-08T12:26:35.979305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Spectrogram, and Mel-Spectrogram\ntransform_spectrogram = Spectrogram()\ntransform_mel_spectrogram = MelSpectrogram(sample_rate=sample_rate,\n    center=True,\n    pad_mode=\"reflect\",\n    power=2.0,\n    norm=\"slaney\",\n    mel_scale=\"htk\",)\nspectrogram = transform_spectrogram(waveform)\nmel_spectrogram = transform_mel_spectrogram(waveform)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:38:10.095554Z","iopub.execute_input":"2024-05-08T12:38:10.096023Z","iopub.status.idle":"2024-05-08T12:38:10.131359Z","shell.execute_reply.started":"2024-05-08T12:38:10.095987Z","shell.execute_reply":"2024-05-08T12:38:10.129668Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_spectrogram(spectrogram[0], title=\"Spectrogram torchaudio\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:28:58.340554Z","iopub.execute_input":"2024-05-08T12:28:58.340921Z","iopub.status.idle":"2024-05-08T12:28:58.748111Z","shell.execute_reply.started":"2024-05-08T12:28:58.340894Z","shell.execute_reply":"2024-05-08T12:28:58.746970Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_spectrogram(mel_spectrogram[0], title=\"Mel Spectrogram\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:38:20.226859Z","iopub.execute_input":"2024-05-08T12:38:20.228026Z","iopub.status.idle":"2024-05-08T12:38:20.609645Z","shell.execute_reply.started":"2024-05-08T12:38:20.227979Z","shell.execute_reply":"2024-05-08T12:38:20.608267Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Spectrograms Using Librosa","metadata":{}},{"cell_type":"code","source":"# Librosa Spectrograms\nmelspec_librosa = librosa.feature.melspectrogram(\n    y=waveform.numpy()[0],\n    sr=sample_rate,\n    center=True,\n    pad_mode=\"reflect\",\n    power=2.0,\n    norm=\"slaney\",\n    htk=True,\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:32:27.986403Z","iopub.execute_input":"2024-05-08T12:32:27.986885Z","iopub.status.idle":"2024-05-08T12:32:28.036605Z","shell.execute_reply.started":"2024-05-08T12:32:27.986845Z","shell.execute_reply":"2024-05-08T12:32:28.035388Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_spectrogram(melspec_librosa, title=\"MelSpectrogram - librosa\", ylabel=\"mel freq\")","metadata":{"execution":{"iopub.status.busy":"2024-05-08T12:32:31.491697Z","iopub.execute_input":"2024-05-08T12:32:31.492109Z","iopub.status.idle":"2024-05-08T12:32:31.856301Z","shell.execute_reply.started":"2024-05-08T12:32:31.492076Z","shell.execute_reply":"2024-05-08T12:32:31.855117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Observation\nThe Melspectrogram created by librosa appeas to be more clear","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}